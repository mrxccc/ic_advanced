type canister_id = principal;
type anon_class_13_1 = 
 service {
   appendOwner: (Owner__1) -> ();
   create_canister: () -> (canister_id);
   delete_canister: (principal) -> ();
   get_owned_canisters_list: () -> (vec Canister__1) query;
   get_owner_list: () -> (vec Owner__1) query;
   get_proposal: (ID) -> (opt Proposal) query;
   get_proposal_list: (ID) -> (vec Proposal) query;
   init: (vec Owner__1, nat) -> (nat);
   install_code: (principal, opt blob) -> ();
   propose: (ProposalType__1, Canister__1, Owner__1, text) -> (Proposal);
   removeOwner: (Owner__1) -> ();
   start_canister: (principal) -> ();
   stop_canister: (principal) -> ();
   vote: (ID) -> (Proposal);
 };
type ProposalType__1 = 
 variant {
   accessRestriction;
   restrictPermissions;
 };
type ProposalType = 
 variant {
   accessRestriction;
   restrictPermissions;
 };
type Proposal = 
 record {
   approvers: vec Owner;
   canisterId: Canister;
   description: text;
   finished: bool;
   id: ID__1;
   proposer: Owner;
   ptype: ProposalType;
   targetOwner: Owner;
 };
type Owner__1 = principal;
type Owner = principal;
type ID__1 = nat;
type ID = nat;
type Canister__1 = principal;
type Canister = principal;
service : () -> anon_class_13_1
